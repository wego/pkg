#!/usr/bin/env bash

POSITIONAL=()
update_path_version=true
update_major_version=false
update_minor_version=false

while [[ $# -gt 0 ]]; do
  case "$1" in
  -p | --path)
    update_path_version=true
    shift 1
    ;;
  -m | --major)
    update_major_version=true
    shift 1
    ;;
  -n | --minor)
    update_minor_version=true
    shift 1
    ;;
  *)
    POSITIONAL+=("$1")
    shift
    ;;
  esac
done
set -- "${POSITIONAL[@]}"

function git_current_branch() {
  git symbolic-ref --short HEAD 2>/dev/null
  or git rev-parse --short HEAD 2>/dev/null
}

current_branch=$(git_current_branch)

if [[ ! $current_branch =~ ^(master|main)$ ]]; then
  echo "this script can only work with branch master or main"
  exit 255
fi

# update before tagging
#git fetch --all
#for remote in $(git remote); do
#  git pull "$remote" "$current_branch"
#done

for dir in $(find . -name 'go.mod' -exec dirname {} \; | sort -u); do
  pkg=$(echo "$dir" | sed 's/\.\///')
  latest_version=$(git tag --sort=-v:refname -l "$pkg/v*" | head -1 | grep -Eo 'v.*')

  current_version=$latest_version
  major_version=0
  minor_version=0
  patch_version=1

  latest_version="${latest_version#[vV]}"
  fields=$(echo "$latest_version" | grep -o "\." | wc -l)
  if [ "$fields" -eq 2 ]; then
    major_version="${latest_version%%\.*}"
    minor_version="${latest_version#*.}"
    minor_version="${minor_version%.*}"
    patch_version="${latest_version##*.}"
  fi

  changes=$(git diff --name-only "$pkg/$current_version"..HEAD "$dir" | wc -l)

  if [ "$changes" -gt 0 ]; then
    [[ $update_path_version == true ]] && patch_version=$((patch_version + 1))
    [[ $update_minor_version == true ]] && minor_version=$((minor_version + 1)) && patch_version=0
    [[ $update_major_version == true ]] && major_version=$((major_version + 1)) && minor_version=0 && patch_version=0
    new_version=v$major_version.$minor_version.$patch_version
    tag=$pkg/$new_version
    echo "tagging package $pkg with version $new_version from $current_version"
    git tag "$tag"
    for remote in $(git remote); do
      remote_repo=$(git remote get-url "$remote")
      echo "pushing $tag to $remote_repo"
      git push "$remote" "$tag"
    done
  else
    echo "no changes in $pkg"
  fi
done
