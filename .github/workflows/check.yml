name: Run Style Check And Unit Test

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45

      - name: Get all changed packages
        id: updated_pkgs
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          # get all the updated directories
          changed_dirs=()
          while IFS= read -r line; do
              changed_dirs+=("$line")
          done <<< "$ALL_CHANGED_FILES"

          # unique the changed directories
          changed_dirs=($(echo "${changed_dirs[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

          # get all changed packages
          updated_pkgs=()
          for dir in "${changed_dirs[@]}"; do
              # check if the dir has go.mod in it, recursively
              updated_dirs=($(find "$dir" -name 'go.mod' -exec dirname {} \; | sort -u | uniq))
              for updated_dir in "${updated_dirs[@]}"; do
                  updated_pkgs+=("$updated_dir")
              done
          done


          # unique the changed packages
          IFS=" " read -r -a updated_pkgs <<<"$(tr ' ' '\n' <<<"${updated_pkgs[@]}" | sort -u | tr '\n' ' ')"

          updated_go_files=$(echo "${updated_pkgs[@]}" | xargs -I {} find {} -name '*.go' -maxdepth 1 -exec dirname {} \; | sort -u | uniq)

          echo "updated_pkgs=${updated_pkgs[*]}" >> $GITHUB_OUTPUT
          has_changed_go_files=false 
          if [ -n "$updated_go_files" ]; then
              has_changed_go_files=true
          fi
          echo "has_changed_go_files=$has_changed_go_files" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        if: ${{ steps.updated_pkgs.outputs.has_changed_go_files == 'true' }}
        with:
          go-version: ^1.20

      - name: Set up tools
        if: ${{ steps.updated_pkgs.outputs.has_changed_go_files == 'true' }}
        run: |
          sudo apt update && sudo apt install -y build-essential bc
          go install github.com/mgechev/revive@latest

      - name: Style Check
        env:
          UPDATED_PKGS: ${{ steps.updated_pkgs.outputs.updated_pkgs }}
        run: |
          # get all the changed directories
          updated_pkgs=($UPDATED_PKGS)
          revive_config=$(realpath revive.toml)
          for pkg in "${updated_pkgs[@]}"; do
              # check do we need to run revive, include go files
              have_go_files=$(find "$pkg" -name '*.go' -maxdepth 1 -exec dirname {} \; | sort -u | uniq)
              if [ -z "$have_go_files" ]; then
                  continue
              fi
              echo "running go vet and revive for $pkg"
              pushd "$pkg" >/dev/null 2>&1 || exit 255
              go vet ./... || exit 255
              revive -formatter friendly -config $revive_config ./... || exit 255
              popd >/dev/null 2>&1 || exit 255
          done

      - name: Run Unit Test
        env:
          UPDATED_PKGS: ${{ steps.updated_pkgs.outputs.updated_pkgs }}
        run: |
          # get all the changed packages
          updated_pkgs=($UPDATED_PKGS)

          for pkg in "${updated_pkgs[@]}"; do
              # check do we need to run revive, include _test.go files
              have_go_files=$(find "$pkg" -name '*_test.go' -maxdepth 1 -exec dirname {} \; | sort -u | uniq)
              if [ -z "$have_go_files" ]; then
                  echo "skipping empty $pkg"
                  continue
              fi
              echo "running go test for $pkg"
              pushd > /dev/null 2>&1 "$pkg" || exit 255
              num_of_pros=$(grep -c ^processor /proc/cpuinfo)
              go test ./... -race -cover -p "$num_of_pros"
              popd > /dev/null 2>&1 || exit 255
          done
