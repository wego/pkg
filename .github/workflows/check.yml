name: Run Style Check And Unit Test

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.19

      - name: Set up tools
        run: |
          sudo apt update && sudo apt install -y build-essential bc

      - name: Install revive
        run: |
          go install github.com/mgechev/revive@latest

      - name: Style Check
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          # get all the changed directories
          changed_dirs=$(echo "$ALL_CHANGED_FILES" | tr ' ' '\n' | xargs -I {} dirname {} | sort -u | uniq)
          # get all changed packages
          changed_pkgs=()
          for dir in $changed_dirs; do
              # check if the dir has go.mod in it, recursively
              updated_pkgs=$(find "$dir" -name 'go.mod' -exec dirname {} \; | sort -u | uniq)
              if [ -n "$updated_pkgs" ]; then
                  changed_pkgs+=("$updated_pkgs")
              fi
          done

          # unique the changed packages
          changed_pkgs=$(echo "${changed_pkgs[@]}" | tr ' ' '\n' | sort -u | uniq)

          revive_config=$(realpath revive.toml)
          for pkg in "${changed_pkgs[@]}"; do
            pushd "$pkg" > /dev/null 2>&1 || exit 255
            go vet ./... || exit 255
            revive -formatter friendly -config $revive_config ./... || exit 255
            popd > /dev/null 2>&1 || exit 255
          done

      - name: Run Unit Test
        run: |
          # get all the changed directories
          changed_dirs=$(echo "$ALL_CHANGED_FILES" | tr ' ' '\n' | xargs -I {} dirname {} | sort -u | uniq)
          # get all changed packages
          changed_pkgs=()
          for dir in $changed_dirs; do
              # check if the dir has go.sum in it, recursively
              updated_pkgs=$(find "$dir" -name 'go.sum' -exec dirname {} \; | sort -u | uniq)
              if [ -n "$updated_pkgs" ]; then
                  changed_pkgs+=("$updated_pkgs")
              fi
          done

          # unique the changed packages
          changed_pkgs=$(echo "${changed_pkgs[@]}" | tr ' ' '\n' | sort -u | uniq)

          for pkg in "${changed_pkgs[@]}"; do
            pushd > /dev/null 2>&1 "$pkg" || exit 255
            num_of_pros=$(grep -c ^processor /proc/cpuinfo)
            go test ./... -race -cover -p "$num_of_pros"
            popd > /dev/null 2>&1 || exit 255
          done
